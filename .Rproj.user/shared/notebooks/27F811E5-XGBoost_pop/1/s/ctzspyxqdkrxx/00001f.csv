"0","# Convert training data to a matrix (XGBoost requires matrix format)"
"0","train_matrix <- as.matrix(train_data[, -ncol(train_data)])  # Exclude the target variable"
"0","train_label <- train_data$total_pop"
"0",""
"0","# Convert testing data to a matrix"
"0","test_matrix <- as.matrix(test_data[, -ncol(test_data)])"
"0","test_label <- test_data$total_pop"
"0",""
"0","# Create DMatrix objects for XGBoost"
"0","dtrain <- xgb.DMatrix(data = train_matrix, label = train_label)"
"0","dtest <- xgb.DMatrix(data = test_matrix, label = test_label)"
"0",""
"0","# Define parameters for XGBoost"
"0","params <- list("
"0","  booster = ""gbtree"","
"0","  objective = ""reg:squarederror"",  # For regression"
"0","  eta = 0.1,                       # Learning rate"
"0","  max_depth = 6,                   # Maximum depth of trees"
"0","  subsample = 0.8,                 # Subsampling ratio of training data"
"0","  colsample_bytree = 0.8           # Subsampling ratio of columns"
"0",")"
"0",""
"0","# Train the XGBoost model"
"0","xgb_model <- xgb.train(params = params, data = dtrain, nrounds = 100, watchlist = list(train = dtrain, test = dtest), early_stopping_rounds = 10, verbose = 0)"
"0",""
"0","# Predict on test data"
"0","pred_xgb <- predict(xgb_model, newdata = dtest)"
"0",""
"0","pred_xgb <- round(pred_xgb)"
"0",""
"0","# Create a dataframe for plotting"
"0","results <- data.frame(Actual = test_data$total_pop, Predicted = pred_xgb)"
"0",""
"0","# Plot Actual vs Predicted"
"0","ggplot(results, aes(x = Actual, y = Predicted)) +"
"0","  geom_point(alpha = 0.6) +"
"0","  geom_abline(intercept = 0, slope = 1, color = ""red"") +"
"0","  labs(title = ""Actual vs Predicted"", x = ""Actual Total Population"", y = ""Predicted Total Population"") +"
"0","  theme_minimal()"
